#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
YELLOW='\033[0;33m'
WHITE='\033[0;37m'
NC='\033[0m'

THEMES_DIR="${HOME}/.local/share/themes"
ICONS_DIR="${HOME}/.local/share/icons"

THEME_FILES_PATH="${THEMES_DIR}/OmTheme"
ICONS_FILES_PATH="${ICONS_DIR}/OmTheme"

RUID=$(who | awk 'FNR == 1 {print $1}')
RUSER_UID=$(id -u ${RUID})

function printRed() {
  printf "${RED}$1${NC}\n"
}

function printGreen() {
  printf "${GREEN}$1${NC}\n"
}

function printCyan() {
  printf "${CYAN}$1${NC}\n"
}

function printYellow() {
  printf "${YELLOW}$1${NC}\n"
}

function printPurple() {
  printf "${PURPLE}$1${NC}\n"
}

function printWhite() {
  printf "${WHITE}$1${NC}\n"
}

function separator() {
  echo 'ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸ðŸ”¸'
}

printf '\n'
printWhite $(printf 'â–š%.0s' {1..80})
printWhite "\nThis software is just a \"merge\" of files from other softwares."
printWhite "I just changed some colors in some files."
printWhite "\nUsed softwares:"
printWhite "\n- Yaru-Colors - https://www.gnome-look.org/p/1299514/"
printWhite "- Yaru - https://github.com/ubuntu/yaru"
printWhite "- KDE / breeze-icons - https://github.com/KDE/breeze-icons"
printWhite "- Dracula GTK - https://draculatheme.com/gtk"
printf '\n'
printWhite $(printf 'â–š%.0s' {1..80})

printf '\n'

printCyan "\nðŸ”µ Please, answer some questions with numbers, 1, 2, 3... and so on!"
printCyan "ðŸ”µ That way you're going to know exactly what I'm going to do...\n"

separator

###############################################################################
# Start script
###############################################################################

installTheme=""
while [[ $installTheme != "1" && $installTheme != "2" ]]; do
  if [[ ${installTheme} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Do you want to install OmTheme?\n"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " installTheme
done

if [[ ${installTheme} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
  printCyan "ðŸ”µ BYEE!"
  exit
else
  printCyan "\nðŸ”µ Ok, I have some more questions..."
  printCyan "ðŸ”µ Don't worry, it'll be super fast =)"
fi

printf '\n\n'
separator

copyFiles=""
while [[ $copyFiles != "1" && $copyFiles != "2" ]]; do
  if [[ ${copyFiles} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ I'm going to copy the files to \"${THEME_FILES_PATH}\"."
  printYellow "ðŸŸ¡ Is that ok?\n"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " copyFiles
done

if [[ ${copyFiles} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
  printRed "ðŸ”´ Unfortunately, I was going to need those files to enable the theme!"
  printRed "ðŸ”´ BYEE!"
  exit
else
  printCyan "\nðŸ”µ Ok, I will copy the files in a moment..."
fi

printf '\n'
separator

iconsTheme=""
while [[ $iconsTheme != "1" && $iconsTheme != "2" ]]; do
  if [[ ${iconsTheme} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Do you want me to copy icon files to \"${ICONS_FILES_PATH}\"."
  printCyan "ðŸ”µ The icons are not required, but they are nice!\n"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " iconsTheme
done

if [[ ${iconsTheme} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
else
  printCyan "\nðŸ”µ Ok, I'll copy the icons as soon as we're done here..."
fi

printf '\n'
separator

setTheme=""
while [[ $setTheme != "1" && $setTheme != "2" ]]; do
  if [[ ${setTheme} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Do you want me to apply the theme when I'm done?"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " setTheme
done

if [[ ${setTheme} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
else
  printCyan "\nðŸ”µ Ok, I'll set the theme for you..."
fi

printf '\n'
separator

setIcons=""
while [[ $iconsTheme == "1" && $setIcons != "1" && $setIcons != "2" ]]; do
  if [[ ${setIcons} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Do you want me to apply the icons theme when I'm done?"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " setIcons
done

if [[ ${setIcons} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
else
  printCyan "\nðŸ”µ Ok, I'll set the icons for you..."
fi

printf '\n'
separator

confirmation=""
while [[ $confirmation != "1" && $confirmation != "2" ]]; do
  if [[ ${confirmation} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Please, confirm your answers?\n"

  if [[ ${installTheme} == "1" ]]; then
    printCyan "ðŸ”µ You want me to install OmTheme"
  fi

  if [[ ${copyFiles} == "1" ]]; then
    printCyan "ðŸ”µ You want me to copy the theme files to ${THEME_FILES_PATH}"
  else
    printRed "ðŸ”´ You DON'T want me to copy the theme files to ${THEME_FILES_PATH}"
  fi

  if [[ ${iconsTheme} == "1" ]]; then
    printCyan "ðŸ”µ You want me to copy the icon files to ${ICONS_FILES_PATH}"
  else
    printRed "ðŸ”´ You DON'T want me to copy the icons files to ${ICONS_FILES_PATH}"
  fi

  if [[ ${setTheme} == "1" ]]; then
    printCyan "ðŸ”µ You want me to set the theme for you"
  else
    printRed "ðŸ”´ You DON'T want me to set the theme for you"
  fi

  if [[ ${setIcons} == "1" ]]; then
    printCyan "ðŸ”µ You want me to set the icons theme for you"
  else
    printRed "ðŸ”´ You DON'T want me to set the icons theme for you"
  fi

  printGreen "\nðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " confirmation
done

if [[ $confirmation != "1" ]]; then
  printCyan "\nðŸ”µ Ok, you can restart the script and answer again..."
  exit
else
  printCyan "\nðŸ”µ Ok, now I'm going to do my job..."
fi

printf '\n'
separator
printf '\n'

if [[ ${copyFiles} == "1" ]]; then
  if [[ ! -d "$THEME_FILES_PATH" ]]; then
    mkdir -p $THEME_FILES_PATH
  fi

  cp -R './OmTheme/.' "${THEME_FILES_PATH}"
  printCyan "\nðŸ”µ Theme files copied to ${THEME_FILES_PATH}..."
fi

if [[ ${setTheme} == "1" ]]; then
  sudo apt update -y
  sudo apt install -y gnome-shell-extensions
  sudo apt install -y gsettings-desktop-schemas
  gnome-extensions enable 'user-theme@gnome-shell-extensions.gcampax.github.com'

  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.desktop.interface gtk-theme "OmTheme" 2>/dev/null
  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.desktop.interface cursor-theme "DMZ-Black" 2>/dev/null
  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.desktop.wm.preferences theme "OmTheme" 2>/dev/null
  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.desktop.wm.preferences button-layout ':minimize,maximize,close' 2>/dev/null
  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.shell.extensions.user-theme name "OmTheme" 2>/dev/null

  dashToDock=""
  while [[ $dashToDock != "1" && $dashToDock != "2" ]]; do
    if [[ ${dashToDock} != "" ]]; then
      printRed "\nðŸ”´ Please, use the numbers to answer!\n"
      printCyan "ðŸ”µ Let me ask you again..."
    fi

    printYellow "\nðŸŸ¡ Do you want me to set dash-to-dock for you?"
    printGreen "ðŸŸ¢ 1) Yes"
    printGreen "ðŸ”´ 2) No"
    read -p "Your turn [1, 2]: " dashToDock
  done

  if [[ ${dashToDock} != "1" ]]; then
    printCyan "\nðŸ”µ Ok, I won't!"
  else
    printCyan "\nOk, it's moving down =)"
    sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.shell.extensions.dash-to-dock apply-custom-theme true 2>/dev/null
    sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots true 2>/dev/null
    sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'BOTTOM' 2>/dev/null
    sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false 2>/dev/null
  fi

  printCyan "\nðŸ”µ Theme OmTheme is activated...\n"
fi

printf '\n'
separator
printf '\n'

if [[ ${iconsTheme} == "1" ]]; then
  if [[ ! -d "$ICONS_FILES_PATH" ]]; then
    mkdir -p $ICONS_FILES_PATH
  fi

  cp -R './yaru-blue-with-breeze/.' "${ICONS_FILES_PATH}"
  printCyan "ðŸ”µ Icons copied to ${ICONS_FILES_PATH}..."
fi

if [[ ${setIcons} == "1" ]]; then
  gsettings set org.gnome.desktop.interface icon-theme "OmTheme"
  printCyan "\nðŸ”µ Icons OmTheme is activated...\n"
fi







printf '\n'
separator

setWallpaper=""
while [[ $setWallpaper != "1" && $setWallpaper != "2" ]]; do
  if [[ ${setWallpaper} != "" ]]; then
    printRed "\nðŸ”´ Please, use the numbers to answer!\n"
    printCyan "ðŸ”µ Let me ask you again..."
  fi

  printYellow "\nðŸŸ¡ Do you want me to set an awesome wallpaper?"
  printGreen "ðŸŸ¢ 1) Yes"
  printGreen "ðŸ”´ 2) No"
  read -p "Your turn [1, 2]: " setWallpaper
done

if [[ ${setIcons} != "1" ]]; then
  printCyan "\nðŸ”µ Ok, I won't!"
else
  wallpaperPath="${HOME}/wallpaper-1.png"
  cp 'Wallpapers/wallpaper-1.png' $wallpaperPath
  sudo -u ${RUID} DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${RUSER_UID}/bus" gsettings set org.gnome.desktop.background picture-uri "file://${wallpaperPath}" 2>/dev/null
  printCyan "\nðŸ”µ Ok, done..."
fi

if [[ ${setIcons} == "1" || ${setTheme} == "1" ]]; then
  restartGnome=""
  while [[ $restartGnome != "1" && $restartGnome != "2" ]]; do
    if [[ ${restartGnome} != "" ]]; then
      printRed "\nðŸ”´ Please, use the numbers to answer!\n"
      printCyan "ðŸ”µ Let me ask you again..."
    fi

    printYellow "\nðŸŸ¡ Sometimes GNOME won't apply themes without restarting,"
    printYellow "ðŸŸ¡ that can be achieved by pressing ALT + F2, typing r and ENTER."
    printYellow "ðŸŸ¡ Do you want me to do that for you?"
    printGreen "ðŸŸ¢ 1) Yes"
    printGreen "ðŸ”´ 2) No"
    read -p "Your turn [1, 2]: " restartGnome
  done

  if [[ ${restartGnome} != "1" ]]; then
    printCyan "\nðŸ”µ Ok, I won't!"
  else
    printCyan "\nðŸ”µ Ok, restarting..."
    dbus-send --type=method_call --print-reply --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'global.reexec_self()'
    printCyan "\nðŸ”µ Gnome-shell restarted..."
  fi
fi

printf '\n'
separator

printPurple "\n\nðŸŸ£ I believe everything was installed correctly, ðŸ¤© "
printPurple "ðŸŸ£ but I recommend restarting you computer to be sure! ðŸ¥³"

printPurple "\n\nðŸŸ£ Thank you, BYE BYE!!! ðŸ‘‹"
printPurple "ðŸŸ£ Author: OtÃ¡vio Miranda\n\n"
